@using System.Net.Configuration
@using Brewgr.Web
@using Brewgr.Web.Core.Configuration
@using Brewgr.Web.Core.Model
@using ctorx.Core.Formatting
@model BrewSessionViewModel

@{
    ViewBag.Title = Model.RecipeSummary.Name + " Brew Session";
    ViewBag.Canonical = Url.BrewSessionDetailUrl(Model.BrewSessionId, Model.RecipeSummary.Name);
}

<div id="brewsessiondetail-view" class="content builder-wrapper">

    <div class="primary builder">
        <div class="intro">
            <a href="@Url.UserProfileUrl(Model.BrewedByUsername)"><img src="@UserAvatar.GetAvatar(50, Model.BrewedByUser.EmailAddress)" width="50" height="50" alt="@Model.BrewedByUsername" /></a>
            <h3>
                Brewed by
                <a href="@Url.UserProfileUrl(Model.BrewedByUsername)">@Model.BrewedByUsername</a><br />
                <span>@Model.BrewDate.ToLongDateString()</span>
            </h3>
            <div>
                <a href="#tastingnotes">Tasting Notes (@Model.TastingNotes.Count)</a>
                <a href="#comments">Comments (@Model.CommentWrapperViewModel.CommentViewModels.Count)</a>
            </div>
        </div>

        @* Brewing Notes *@
        <div class="groupbox" id="brew-log">
            <span><h3 class="floatleft">Brew Log</h3></span>
            <div class="padding18">
                @if (!string.IsNullOrWhiteSpace(Model.Notes))
                {
                    foreach (var note in Model.NotesByLineBreak())
                    {
                        @(Html.Raw(note == "<br />" ? "<br />" : Html.Encode(note)))
                    }
                }
                else
                {
                    <text>No notes have been logged for this brew session.</text>
                }
            </div>
        </div>

        @* Water Infusion *@
        @if (Model.RecipeSummary.GetRecipeType() != RecipeType.Extract)
        {
            <div class="groupbox">
                <span><h3 class="floatleft">Water Infusion</h3></span>
                <div class="padding18">
                    <div class="summary marginbottom20">
                        <h3>Brew Session Specific</h3>
                        <div class="item">
                            <label>Grain</label>
                            <span>
                                @Html.Raw(Model.ShowValue(Model.GrainWeight, Model.GrainWeight + Model.UnitLabel(" lb", " kg") + " @ " + Model.GrainTemp + Html.Raw("&deg;") + Model.UnitLabel("F", "C")))
                            </span>
                        </div>
                        <div class="item">
                            <label>Total Boil Time</label>
                            <span>
                                @Model.ShowValue(Model.BoilTime, Model.BoilTime + " minuites")
                            </span>
                        </div>
                        <div class="item">
                            <label>Wort Into Fermenter</label>
                            <span>
                                @Model.ShowValue(Model.FermentVolumeEst, Model.FermentVolumeEst + @Model.UnitLabel(" gallons", " liters"))
                            </span>
                        </div>
                        <div class="item">
                            <label>Target Mash Temperature</label>
                            <span>
                                @Html.Raw(Model.ShowValue(Model.TargetMashTemp, Model.TargetMashTemp + @Model.UnitLabel("&deg;F", "&deg;C")))
                            </span>
                        </div>
                        <div class="item">
                            <label>Mash Thickness</label>
                            <span>
                                @Model.ShowValue(Model.MashThickness, Model.MashThickness + @Model.UnitLabel(" qt/lb", " l/kg"))
                            </span>
                        </div>
                    </div>
                    <div class="summary marginbottom20">
                        <h3>Equipment Profile</h3>
                        <div class="item">
                            <label>Brew Kettle Trub Loss</label>
                            <span>@Model.ShowValue(Model.BrewKettleLoss, Model.BrewKettleLoss + @Model.UnitLabel(" gallons", " liters"))</span>
                        </div>
                        <div class="item">
                            <label>Wort Shrinkage</label>
                            <span>@Model.ShowValue(Model.WortShrinkage, Model.WortShrinkage + @Model.UnitLabel(" gallons", " liters"))</span>
                        </div>
                        <div class="item">
                            <label>Mash Tun Equipment Loss</label>
                            <span>@Model.ShowValue(Model.MashTunLoss, Model.MashTunLoss + @Model.UnitLabel(" gallons", " liters"))</span>
                        </div>
                        <div class="item">
                            <label>Boil Loss</label>
                            <span>@Model.ShowValue(Model.BoilLoss, Model.BoilLoss + @Model.UnitLabel(" gallons", " liters") + "/hour")</span>
                        </div>
                        <div class="item">
                            <label>Grain Absorption</label>
                            <span>@Model.ShowValue(Model.MashGrainAbsorption, Model.MashGrainAbsorption + @Model.UnitLabel(" gallons", " liters") + Model.UnitLabel("/lb", "/kg"))</span>
                        </div>
                        <div class="item">
                            <label>Sparge Grain Absorption</label>
                            <span>@Model.ShowValue(Model.SpargeGrainAbsorption, Model.SpargeGrainAbsorption + @Model.UnitLabel(" gallons", " liters") + Model.UnitLabel("/lb", "/kg"))</span>
                        </div>
                    </div>
                    <div class="summary marginbottom20">
                        <h3>Calculated Totals</h3>
                        <div class="item">
                            <label>Runoff Volume</label>
                            <span>@Model.ShowValue(Model.BoilVolumeEst, Model.BoilVolumeEst + @Model.UnitLabel(" gallons", " liters"))</span>
                        </div>
                        <div class="item">
                            <label>Total Water Needed</label>
                            <span>@Model.ShowValue(Model.TotalWaterNeeded, Model.TotalWaterNeeded + @Model.UnitLabel(" gallons", " liters"))</span>
                        </div>
                        <div class="item">
                            <label>Mash/Strike Volume</label>
                            <span>@Model.ShowValue(Model.StrikeWaterVolume, Model.StrikeWaterVolume + @Model.UnitLabel(" gallons", " liters"))</span>
                        </div>
                        <div class="item">
                            <label>1st Runnings</label>
                            <span>@Model.ShowValue(Model.FirstRunningsVolume, Model.FirstRunningsVolume + @Model.UnitLabel(" gallons", " liters"))</span>
                        </div>
                        <div class="item">
                            <label>Sparge Volume</label>
                            <span>@Model.ShowValue(Model.SpargeWaterVolume, Model.SpargeWaterVolume + @Model.UnitLabel(" gallons", " liters"))</span>
                        </div>
                        <div class="item">
                            <label>Strike Temperature</label>
                            <span>
                                @Html.Raw(Model.ShowValue(Model.StrikeWaterTemp, @Model.StrikeWaterTemp + "&deg;" + @Model.UnitLabel("F", "C")))
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        }

        @* Mash / Boil *@
        <div class="groupbox">
            <span><h3 class="floatleft">@(Model.RecipeSummary.GetRecipeType() == RecipeType.Extract ? "Boil" : "Mash / Boil")</h3></span>
            <div class="padding18">

                @if (Model.RecipeSummary.GetRecipeType() != RecipeType.Extract)
            {
                    <div class="summary marginbottom20">
                        <h3>Mash</h3>
                        <div class="item">
                            <label>Mash PH</label>
                            <span>@Model.ShowValue(Model.MashPH, Model.MashPH.ToString())</span>
                        </div>
                        <div class="item">
                            <label>Mash Start Temp</label>
                            <span>@Html.Raw(Model.ShowValue(Model.MashStartTemp, Model.MashStartTemp + "&deg;" + Model.UnitLabel("F", "C")))</span>
                        </div>
                        <div class="item">
                            <label>Mash End Temp</label>
                            <span>@Html.Raw(Model.ShowValue(Model.MashEndTemp, Model.MashEndTemp + "&deg;" + Model.UnitLabel("F", "C")))</span>
                        </div>
                        <div class="item">
                            <label>Mash Time</label>
                            <span>@Model.ShowValue(Model.MashTime, Model.MashTime + " minutes")</span>
                        </div>
                    </div>
                }
                <div class="summary">
                    <h3>Boil</h3>
                    <div class="item">
                        <label>Pre-Boil Gravity</label>
                        <span>@Model.ShowValue(Model.PreBoilGravity, string.Format("{0:0.000}", Model.PreBoilGravity))</span>
                    </div>
                    <div class="item">
                        <label>Boil Volume</label>
                        <span>@Model.ShowValue(Model.BoilVolumeActual, Model.BoilVolumeActual + Model.UnitLabel(" gallons", " liters"))</span>
                    </div>
                    <div class="item">
                        <label>Boil Time</label>
                        <span>@Model.ShowValue(Model.BoilTimeActual, Model.BoilTimeActual + " minutes")</span>
                    </div>
                    <div class="item">
                        <label>Post-Boil Volume</label>
                        <span>@Model.ShowValue(Model.PostBoilVolume, Model.PostBoilVolume + Model.UnitLabel(" gallons", " liters"))</span>
                    </div>
                </div>
            </div>
        </div>

        @* Fermentation *@
        <div class="groupbox">
            <span><h3 class="floatleft">Fermentation</h3></span>
            <div class="padding18">
                <div class="summary">
                    <div class="item">
                        <label>Volume in Fermenter</label>
                        <span>@Model.ShowValue(Model.FermentVolumeActual, Model.FermentVolumeActual + Model.UnitLabel(" gallons", " liters"))</span>
                    </div>
                    <div class="item">
                        <label>Original Gravity</label>
                        <span>@Model.ShowValue(Model.OriginalGravity, string.Format("{0:0.000}", Model.OriginalGravity))</span>
                    </div>
                    <div class="item">
                        <label>Final Gravity</label>
                        <span>@Model.ShowValue(Model.FinalGravity, string.Format("{0:0.000}", Model.FinalGravity))</span>
                    </div>
                </div>
            </div>
        </div>
        @*Racking*@
        <div class="groupbox">
            <span><h3 class="floatleft">Racking</h3></span>
            <div class="padding18">
                <div class="summary">
                    <div class="item">
                        <label>Racking Date</label>
                        <span>@Model.ShowValue(Model.RackingDate, Model.RackingDate.HasValue ? Model.RackingDate.Value.ToShortDateString() : null)</span>
                    </div>
                    <div class="item">
                        <label>Racking Gravity</label>
                        <span>>@Model.ShowValue(Model.RackingGravity, string.Format("{0:0.000}", Model.RackingGravity))</span>
                    </div>
                    <div class="item">
                        <label>Estimated Kegging/Botteling Date</label>
                        <span></span>
                    </div>
                </div>
            </div>
        </div>
        @* Conditioning *@
        <div class="groupbox">
            <span><h3 class="floatleft">Conditioning</h3></span>
            <div class="padding18">
                <div class="summary">
                    <div class="item">
                        <label>Condition Date</label>
                        <span>@Model.ShowValue(Model.ConditionDate, Model.ConditionDate.HasValue ? Model.ConditionDate.Value.ToShortDateString() : null)</span>
                    </div>
                    <div class="item">
                        <label>Bottle/Keg</label>
                        <span>@Model.ShowValue(Model.ConditionTypeId, (Model.ConditionTypeId.HasValue ? Model.ConditionTypeId == (int)ConditionType.Bottle ? "Bottle" : "Keg" : null))</span>
                    </div>
                    @if (Model.ConditionTypeId.HasValue)
                    {
                        if (Model.ConditionTypeId == (int)ConditionType.Bottle)
                        {
                            <div class="item">
                                <label>Priming Sugar Type</label>
                                <span>@Model.ShowValue(Model.PrimingSugarType, Model.PrimingSugarType)</span>
                            </div>
                                        <div class="item">
                                            <label>Priming Sugar Amount</label>
                                            <span>@Model.ShowValue(Model.PrimingSugarAmount, Model.PrimingSugarAmount + Model.UnitLabel("oz", "g"))</span>
                                        </div>
                        }
                        else
                        {
                            <div class="item">
                                <label>Keg PSI</label>
                                <span>@Model.ShowValue(Model.KegPSI, Model.KegPSI + " psi")</span>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        @* Tasting Notes *@
        @Html.Partial("~/Views/Recipe/_TastingNoteList.cshtml", Model.TastingNotes ?? new List<TastingNote>())

        @* Comments *@
        @Html.Partial("_BrewSessionDetailComments", Model)

    </div>

    @* Nutrition Label *@
    <div class="compliment">
        @Html.Partial("_RecipeFacts", Model.RecipeSummary)

        @if (ViewBag.ActiveUser != null && ViewBag.ActiveUser.UserId == Model.UserId)
        {
            <a href="@Url.EditBrewSessionUrl(Model.BrewSessionId)" rel="nofollow" class="button button_green edit-recipe margintop10">Edit This Brew Session</a>
        }

        <a href="@Url.RecipeDetailUrl(Model.RecipeSummary.RecipeId, Model.RecipeSummary.Name, Model.RecipeSummary.StyleName)" class="button button_black margintop10 widebutton">Go To Recipe</a>

        @* Advertisement *@
        @if (ViewBag.ActiveUser == null)
        {
            <div class="ad-sense" style="clear: both; padding-top: 10px;">
                <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
                <script>
  (adsbygoogle = window.adsbygoogle || []).push({
    google_ad_client: "ca-pub-7257014799686934",
    enable_page_level_ads: true
  });
                </script>
            </div>
        }
    </div>
</div>
