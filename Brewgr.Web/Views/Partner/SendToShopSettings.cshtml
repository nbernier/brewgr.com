@using Brewgr.Web
@using Brewgr.Web.Core.Model
@model PartnerSendToShopSettings

@{
    Layout = "_PartnerLayout.cshtml";
}

<ul class="breadcrumbs">
    <li><a href="@Url.Action("Index", "Root")">beerrecipe.ca</a></li>
    <li><a href="@Url.Action("Dashboard")">Partner Dashboard</a></li>
    <li>Send-To-Shop Settings</li>
</ul>

<div id="view-sendtoshopsettings" class="content">
    
    <div class="message-wrapper"></div>
    
    <div class="primary">
        
        <h2 class="marginbottom10">Send-To-Shop Settings</h2>
        <p>Customize the send-to-shop experience for Brewgr users sending recipes to your store.</p>
    
        @using(Html.BeginForm())
        {
            @Html.HiddenFor(m => m.PartnerId)
            @Html.HiddenFor(m => m.SendToShopFormatTypeId)
            @Html.HiddenFor(m => m.SendToShopMethodTypeId)

            <div class="form-field">
                @Html.LabelFor(m => m.DeliveryEmailAddress, "Send-To Email Address")
                <span>
                    @Html.TextBoxFor(m => m.DeliveryEmailAddress)
                    <p>This is the email address where we will send any
                        send-to-shop orders.
                    </p>
                </span>
            </div>
            
            @*<div class="form-field">
                <label for="AllowOutOfRangeOrders" class="paddingtop0">Order Timeframe Restrictions</label>
                <span>
                    <select name="AllowOutOfRangeOrders" id="AllowOutOfRangeOrders" class="inline-block valigntop">
                        <option value="false" @Html.IsSelected(Model.AllowOutOfRangeOrders, false)>Enabled</option>
                        <option value="true" @Html.IsSelected(Model.AllowOutOfRangeOrders, true)>Disabled</option>
                    </select>
                    <p class="inline">When enabled, users can only send orders during the timesframe
                        specified below.
                    </p>
                </span>
            </div>
            
            <div class="form-field">
                @Html.LabelFor(m => m.DayStart, "First Day")
                <span>
                    <select name="DayStart" id="DayStart" class="inline-block valigntop">
                        <option value="@((int)DayOfWeek.Sunday)" @Html.IsSelected(Model.DayStart, (int)DayOfWeek.Sunday)>@DayOfWeek.Sunday</option>
                        <option value="@((int)DayOfWeek.Monday)" @Html.IsSelected(Model.DayStart, (int)DayOfWeek.Monday)>@DayOfWeek.Monday</option>
                        <option value="@((int)DayOfWeek.Tuesday)" @Html.IsSelected(Model.DayStart, (int)DayOfWeek.Tuesday)>@DayOfWeek.Tuesday</option>
                        <option value="@((int)DayOfWeek.Wednesday)" @Html.IsSelected(Model.DayStart, (int)DayOfWeek.Wednesday)>@DayOfWeek.Wednesday</option>
                        <option value="@((int)DayOfWeek.Thursday)" @Html.IsSelected(Model.DayStart, (int)DayOfWeek.Thursday)>@DayOfWeek.Thursday</option>
                        <option value="@((int)DayOfWeek.Friday)" @Html.IsSelected(Model.DayStart, (int)DayOfWeek.Friday)>@DayOfWeek.Friday</option>
                        <option value="@((int)DayOfWeek.Saturday)" @Html.IsSelected(Model.DayStart, (int)DayOfWeek.Saturday)>@DayOfWeek.Saturday</option>
                    </select>
                    <p class="inline">This is the first day of the week in which you want to allow orders to be sent.</p>
                </span>
            </div>
            
            <div class="form-field">
                @Html.LabelFor(m => m.DayEnd, "Last Day")
                <span>
                    <select name="DayEnd" id="DayEnd" class="inline-block valigntop">
                        <option value="@((int)DayOfWeek.Sunday)" @Html.IsSelected(Model.DayEnd, (int)DayOfWeek.Sunday)>@DayOfWeek.Sunday</option>
                        <option value="@((int)DayOfWeek.Monday)" @Html.IsSelected(Model.DayEnd, (int)DayOfWeek.Monday)>@DayOfWeek.Monday</option>
                        <option value="@((int)DayOfWeek.Tuesday)" @Html.IsSelected(Model.DayEnd, (int)DayOfWeek.Tuesday)>@DayOfWeek.Tuesday</option>
                        <option value="@((int)DayOfWeek.Wednesday)" @Html.IsSelected(Model.DayEnd, (int)DayOfWeek.Wednesday)>@DayOfWeek.Wednesday</option>
                        <option value="@((int)DayOfWeek.Thursday)" @Html.IsSelected(Model.DayEnd, (int)DayOfWeek.Thursday)>@DayOfWeek.Thursday</option>
                        <option value="@((int)DayOfWeek.Friday)" @Html.IsSelected(Model.DayEnd, (int)DayOfWeek.Friday)>@DayOfWeek.Friday</option>
                        <option value="@((int)DayOfWeek.Saturday)" @Html.IsSelected(Model.DayEnd, (int)DayOfWeek.Saturday)>@DayOfWeek.Saturday</option>
                    </select>
                    <p class="inline">This is the last day of the week in which you want to allow orders to be sent.</p>
                </span>
            </div>
            
            <div class="form-field">
                @Html.LabelFor(m => m.HourStart, "Starting Hour")
                <span>
                    <select name="HourStart" id="HourStart" class="inline-block valigntop">
                        @for(var i = 0; i < 24; i++)
                        {
                            <option value="@i" @Html.IsSelected(Model.HourStart, i)>@(i == 0 ? "12" : i > 12 ? (i - 12).ToString() : i.ToString()):00 @(i >= 11 ? "PM" : "AM")</option>
                        }
                    </select>
                    <p class="inline">This is the hour that you want users to be able to start sending you orders.</p>
                </span>
            </div>
            
            <div class="form-field">
                @Html.LabelFor(m => m.HourEnd, "Ending Hour")
                <span>
                    <select name="HourEnd" id="HourEnd" class="inline-block valigntop">
                        @for(var i = 0; i < 24; i++)
                        {
                            <option value="@i" @Html.IsSelected(Model.HourEnd, i)>@(i == 0 ? "12" : i > 12 ? (i - 12).ToString() : i.ToString()):00 @(i >= 11 ? "PM" : "AM")</option>
                        }
                    </select>
                    <p class="inline">This is the hour that you want users to no longer be able to send you orders.</p>
                </span>
            </div>
            
            <div class="form-field">
                @Html.LabelFor(m => m.ConfirmationMessageText, "Confirmation Email Message Text")
                <span>
                    @Html.TextAreaFor(m => m.ConfirmationMessageText)
                    <p class="wide">This is the message text that will be sent to users after they send you an order.</p>
                </span>
            </div>
            
            <div class="form-field">
                @Html.LabelFor(m => m.ContactPartnerMessageText, "Problem With Order Message Text")
                <span>
                    @Html.TextAreaFor(m => m.ContactPartnerMessageText)
                    <p class="wide">This is the message that will be sent to users when you flag an order as having a problem.  This email message
                        is only sent after you initiate it, and will automatically include your contact phone number.
                    </p>
                </span>
            </div>
            
            <div class="form-field">
                @Html.LabelFor(m => m.ReadyForPickupMessageText, "Ready For Pickup Message Text")
                <span>
                    @Html.TextAreaFor(m => m.ReadyForPickupMessageText)
                    <p class="wide">This is the message that is sent to users when the orders they have sent you are 
                        ready for pick up.
                    </p>
                </span>
            </div>            
            
            *@<input type="submit" value="Save Settings" class="button button_green" />
        }

    </div>

    <div class="compliment">
        @Html.Partial("_ServiceStatus", new PartnerServiceStatusViewModel { PartnerId = Model.PartnerId, PartnerServiceType = PartnerServiceType.SendToShop, IsEnabled = ViewBag.ServiceIsEnabled })
    </div>
    
    <div class="clearall"></div>

</div>